{"version":3,"file":"index.cjs","sources":["CripToe.js","index.js"],"sourcesContent":["/** Provides Sha256 hashing and AES-GCM encryption and decryption of strings. For Node.*/\nexport default class CripToe {\n    /**\n     * The message originally provided to the instance for encryption.\n     **/\n    message;\n    /**\n     * The message originally provided to the instance encoded into a Uint8Array.\n     **/\n    encoded;\n    /**\n     * @param message - String to be encrypted or hashed.\n     **/\n    constructor(message, password, opts) {\n        if (message.length > 1260 && !opts?.silenceWarnings) {\n            console.warn(`WARNING: The message supplied to ${this.constructor.name} is possibly too long for a URL.\\nTests show that messages longer than 1,260 characters may exceed the maximum recommended length for a URL, which is 2,084 characters.\\nlength:\\n${message.length}\\nmessage:\\n${message}`);\n        }\n        this.message = message;\n        this.encoded = new TextEncoder().encode(message);\n        // ENSURES THAT THE CIPHER IS ONLY GENERATED ONCE.\n        this._cipher = undefined;\n        // GENERATES THE ENCRYPTION KEY\n        // This method uses a generator function to allow for the key to only be\n        // generated when needed and only once. Additionally, this method is\n        // scalable to allow for password based keys. If that is needed one day.\n        this._cripKeyWalk = this.genCripKey(password ? password : undefined);\n        this._cripKeyWalk.next().then((key) => {\n            this._cripKey = key.value;\n        });\n        // ENSURES THAT THE WRAP KEY IS ONLY GENERATED ONCE.\n        // Requires that salt be provided. Salt is not provided here. Although, you\n        // can use 'Cripto.random()' to generate salt.\n        this._wrappedKey = undefined;\n    }\n    /**\n     * Hashes any string into a Sha256 hash. By default will hash the mesage initially provided to the constructor.\n     **/\n    async sha256(message) {\n        if (!message)\n            message = this.message;\n        const encoded = message ? new TextEncoder().encode(message) : this.encoded;\n        return this.CRYP.digest(\"SHA-256\", encoded).then((hash) => {\n            const hashArray = Array.from(new Uint8Array(hash));\n            const hashHex = hashArray\n                .map((byte) => byte.toString(16).padStart(2, \"0\"))\n                .join(\"\");\n            return hashHex;\n        });\n    }\n    /**\n     * Encrypts the message into AES-GCM.\n     * AES-GCM as opposed to AES-CBC or AES-CTR includes checks that the ciphertext has not been modified.\n     **/\n    async encrypt(options) {\n        if (!this._cripKey) {\n            this._cripKey = await this._cripKeyWalk.next().then((key) => key.value);\n        }\n        if (!this._cipher) {\n            const iv = this._iv;\n            const key = this._cripKey;\n            const promisedCipher = await this.CRYP.encrypt({\n                name: \"AES-GCM\",\n                iv: iv,\n            }, key, this.encoded);\n            this._cipher = promisedCipher;\n        }\n        if (options?.safeURL) {\n            return {\n                cipher: CripToe.encodeUrlSafeBase64(this.encrypted),\n                initVector: CripToe.encodeUrlSafeBase64(this.initVector),\n                key: this._cripKey,\n            };\n        }\n        else if (options?.toBase64) {\n            return {\n                cipher: CripToe.arrayBufferToBase64(this._cipher),\n                initVector: CripToe.arrayBufferToBase64(this._iv),\n                key: this._cripKey,\n            };\n        }\n        else {\n            return {\n                cipher: this._cipher,\n                initVector: this._iv,\n                key: this._cripKey,\n            };\n        }\n    }\n    /**Decrypts any AES-GCM encrypted data provided you have the necessary parameters.\n     *\n     * @param key - The Key used to initially encrypt. {@see CripToe.cripKey}\n     * @param iv - The Initialization Vector or, nonce, used to salt the encryption. Provided as base64 string.\n     * @param toDecrypt - The encrypted data to be decrypted. Provided as base64 string.\n     **/\n    async decrypt(cipher, key, initVector, options) {\n        if (!(key instanceof CryptoKey))\n            throw new Error(\"You must provide a valid encryption key to decrypt. It should be an instance of CryptoKey.\");\n        if (!(cipher instanceof ArrayBuffer || typeof cipher === \"string\"))\n            throw new Error(\"You must provide a valid encrypted message to decrypt. It should be an instance of ArrayBuffer or a string.\");\n        if (typeof cipher === \"string\") {\n            cipher = CripToe.base64ToArrayBuffer(cipher);\n        }\n        if (typeof initVector === \"string\") {\n            initVector = new Uint8Array(CripToe.base64ToArrayBuffer(initVector));\n        }\n        const decrypted = await this.CRYP.decrypt({\n            name: \"AES-GCM\",\n            iv: initVector,\n        }, key, cipher);\n        return new TextDecoder(\"utf-8\").decode(decrypted);\n    }\n    async unwrapKey(wrappedKey, wrappingKeyString) {\n        const wrappingKey = await this._parseJWk(wrappingKeyString);\n        const unWrappedKey = await this.CRYP.unwrapKey(\"jwk\", wrappedKey, wrappingKey, {\n            name: \"AES-KW\",\n        }, {\n            name: \"AES-GCM\",\n            length: 256,\n        }, true, [\"decrypt\"]);\n        this._wrappedKey = wrappedKey;\n        this._cripKey = unWrappedKey;\n        return true;\n    }\n    /**\n     * Wraps the key in JWK (Json Web Key) format using AES-KW.\n     * The benefit of AES-KW is that it doesn't require an Initialization Vector.\n     * See: https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/wrapKey\n     *\n     * Even if this function is called multiple times the wrapped key will only be generated once.\n     * Subsequent calls will simply return the originally wrapped key.\n     *\n     * @param wrappingKey (JWK) - The key used to wrap the secret key. If not provided, a new key will be generated.\n     * @param opts - Options for exporting the wrapped key:\n     * - export: boolean - Whether to export the wrapped key. Will return the wrapped key and the wrapping key in an Object:\n     *   {\n     *   wrappingKey: string,\n     *   wrappedKey: ArrayBuffer\n     *   }\n     *  - safeURL: boolean - Whether to return the properties in the returned object as a special base64 encoding with special\n     *  characters removed. To convert them back to standard base64 {@see CripToe.decodeUrlSafeBase64.}\n     *  - toBase64: boolean - Whether to return the properties in the returned object as a standard base64 encoding. to convert\n     *  them back to an ArrayBuffer @see CripToe.base64ToArrayBuffer.\n     **/\n    async wrapKey(opts = {\n        export: false,\n    }, wrappingKeyJWK) {\n        // Check for encryption key.\n        if (!this._cripKey) {\n            this._cripKey = await this.genCripKey()\n                .next()\n                .then((key) => key.value);\n        }\n        if (this._wrappedKey) {\n            return this._wrappedKey;\n        }\n        // Generate a key to wrap the key.\n        // Intentionally not using the same method for generating a key as the one used to encrypt.\n        let wrappingKey;\n        if (wrappingKeyJWK) {\n            wrappingKey = await this._parseJWk(wrappingKeyJWK);\n        }\n        else {\n            wrappingKey = await this.CRYP.generateKey({\n                name: \"AES-KW\",\n                length: 256,\n            }, true, [\"wrapKey\", \"unwrapKey\"]);\n        }\n        const wrappedKey = await this.CRYP.wrapKey(\"jwk\", this._cripKey, wrappingKey, {\n            name: \"AES-KW\",\n        });\n        this._wrappedKey = wrappedKey;\n        const wrappingKeyJwk = await this.CRYP.exportKey(\"jwk\", wrappingKey);\n        const wrappingKeyString = JSON.stringify(wrappingKeyJwk);\n        if (opts.export) {\n            const exported = {\n                wrappingKey: wrappingKeyString,\n                wrappedKey: this._wrappedKey,\n            };\n            if (opts.safeURL) {\n                return {\n                    wrappingKey: CripToe.encodeUrlSafeBase64(wrappingKeyString),\n                    wrappedKey: CripToe.encodeUrlSafeBase64(this._wrappedKey),\n                };\n            }\n            else if (opts.toBase64) {\n                return {\n                    wrappingKey: Buffer.from(wrappingKeyString).toString(\"base64\"),\n                    wrappedKey: CripToe.arrayBufferToBase64(this._wrappedKey),\n                };\n            }\n            else {\n                return exported;\n            }\n        }\n        else {\n            return this._wrappedKey;\n        }\n    }\n    /**\n     * The message encrypted into base64.\n     **/\n    get encrypted() {\n        if (this._cipher instanceof ArrayBuffer)\n            return CripToe.arrayBufferToBase64(this._cipher);\n        else\n            throw new Error(\"Not encrypted yet. You must call the 'encrypt' method before calling this property.\");\n    }\n    /**\n     * The Initial Vector, or nonce, used to salt the encryption.\n     **/\n    get initVector() {\n        return CripToe.arrayBufferToBase64(this._iv.buffer);\n    }\n    /**\n     * Converts an Array Buffer to a base64 string.\n     **/\n    static arrayBufferToBase64(buffer) {\n        return Buffer.from(buffer).toString(\"base64\");\n    }\n    /**\n     * Converts a base64 string into an Array Buffer\n     **/\n    static base64ToArrayBuffer(base64) {\n        return Buffer.from(base64, \"base64\").buffer;\n    }\n    /**\n     * Removes special characters from a base64 string for URL compatibility.\n     * Removed characters include:\n     * - '='\n     * - '+'\n     * - '/'\n     *\n     * {@see CripToe.encrypted}\n     **/\n    static encodeUrlSafeBase64(cipher) {\n        if (cipher instanceof ArrayBuffer) {\n            return Buffer.from(cipher).toString(\"base64url\");\n        }\n        else {\n            return Buffer.from(cipher, \"base64\").toString(\"base64url\");\n        }\n    }\n    /**\n     * Takes a base64 string that has been formatted with @link CripToe.encodeUrlSafeBase64\n     **/\n    static decodeUrlSafeBase64(urlSafe) {\n        const base64 = Buffer.from(urlSafe, \"base64url\").toString(\"base64\");\n        return base64;\n    }\n    isNode = typeof process === \"object\" && process + \"\" === \"[object process]\";\n    _cipher;\n    _cripKey;\n    _cripKeyWalk;\n    _wrappedKey;\n    /**Provides Node and browser compatibility for crypto.*/\n    CRYP = (() => {\n        if (this.isNode) {\n            const cryp = crypto.subtle;\n            if (cryp instanceof SubtleCrypto)\n                return cryp;\n            else\n                throw new Error(\"SubtleCrypto is not available.\");\n            /*    } else if (\"Not in Node\") {\n            const cryp = window.crypto.subtle;\n            if (cryp instanceof SubtleCrypto) return cryp;\n            else throw new Error(\"SubtleCrypto is not available.\");*/\n        }\n        else\n            throw new Error(\"You are not in a supported environment.\");\n    })();\n    async _parseJWk(JWK) {\n        const wrappingKeyJwk = JSON.parse(JWK);\n        return await this.CRYP.importKey(\"jwk\", wrappingKeyJwk, {\n            name: \"AES-KW\",\n        }, true, [\"unwrapKey\"]);\n    }\n    get random() {\n        if (this.isNode) {\n            return crypto.getRandomValues(new Uint8Array(intArrLength));\n            /*    } else if (\"Not in Node\") {\n            return window.crypto.getRandomValues(new Uint8Array(intArrLength));*/\n        }\n        else\n            throw new Error(\"You are not in a supported environment.\");\n    }\n    static random = () => {\n        if (typeof process === \"object\" && process + \"\" === \"[object process]\") {\n            return crypto.getRandomValues(new Uint8Array(intArrLength));\n            /*    } else if (\"Not in Node\") {\n            return window.crypto.getRandomValues(new Uint8Array(intArrLength));*/\n        }\n        else\n            throw new Error(\"You are not in a supported environment.\");\n    };\n    /**\n     * Intentional dupe of 'get random()'. To avoid accidentally reusing an initVector\n     **/\n    _iv = (() => {\n        if (this.isNode) {\n            return crypto.getRandomValues(new Uint8Array(intArrLength));\n            /*    } else if (\"Not in Node\") {\n            return window.crypto.getRandomValues(new Uint8Array(intArrLength));*/\n        }\n        else\n            throw new Error(\"You are not in a supported environment.\");\n    })();\n    /**The key used to encrypt and decrypt the message.**/\n    async *genCripKey(password) {\n        yield undefined;\n        if (!password) {\n            return await this.CRYP.generateKey({\n                name: \"AES-GCM\",\n                length: 256,\n            }, true, [\"encrypt\", \"decrypt\"]);\n        }\n        else {\n            return await this.CRYP.importKey(\"raw\", new TextEncoder().encode(password), { name: \"PBKDF2\" }, false, [\"deriveKey\", \"deriveBits\"]);\n        }\n    }\n}\n/**\n * Used to determine the length of Uint8Array's for random values.\n **/\nconst intArrLength = 12;\n","import * as C from \"./CripToe\";\nexport const CripToe = C.default;\nexport const calcAge = (anniversary) => Math.round(Math.abs(new Date(anniversary).getTime() - new Date().getTime()) /\n    8.64e7 /\n    365);\nexport const ranNumG = (max) => Math.floor(Math.random() * max);\nexport const makeArray = (maxIndex, useKeysBool) => {\n    if (useKeysBool) {\n        return [...Array(maxIndex).keys()].map((x) => ++x);\n    }\n    else {\n        return [...Array(maxIndex).keys()];\n    }\n};\nexport const shuffle = (inputArr) => {\n    const applyShuffler = () => {\n        let len = inputArr.length;\n        while (len) {\n            const ran = ranNumG(len--);\n            [inputArr[ran], inputArr[len]] = [inputArr[len], inputArr[ran]];\n        }\n        return inputArr;\n    };\n    return applyShuffler();\n};\nexport const getLanguage = () => {\n    if (navigator.languages && navigator.languages.length) {\n        return navigator.languages[0];\n    }\n    else {\n        return navigator.language || \"en\";\n    }\n};\nexport const sleep = (time) => new Promise((resolve) => setTimeout(resolve, time * 1000));\nexport const normalizeEpochDate = (dateString) => {\n    const date = new Date(dateString);\n    const format = {\n        month: \"long\",\n        day: \"numeric\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n    };\n    return `${date.toLocaleTimeString(\"en-US\", format)}`;\n};\nexport function isBase64(str) {\n    const notBase64 = /[^A-Z0-9+\\/=]/i;\n    const len = str.length;\n    if (!len || len % 4 !== 0 || notBase64.test(str)) {\n        return false;\n    }\n    const firstPaddingChar = str.indexOf(\"=\");\n    return (firstPaddingChar === -1 ||\n        firstPaddingChar === len - 1 ||\n        (firstPaddingChar === len - 2 && str[len - 1] === \"=\"));\n}\nconst Utils = {\n    CripToe,\n    calcAge,\n    ranNumG,\n    makeArray,\n    shuffle,\n    getLanguage,\n    sleep,\n    normalizeEpochDate,\n    isBase64,\n};\nexport default Utils;\n"],"names":["C.default"],"mappings":"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"}